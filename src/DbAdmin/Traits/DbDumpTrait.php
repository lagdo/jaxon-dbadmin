<?php

namespace Lagdo\DbAdmin\DbAdmin\Traits;

use Lagdo\DbAdmin\Driver\Db\StatementInterface;
use Lagdo\DbAdmin\Driver\Entity\TableEntity;

use function strlen;
use function in_array;
use function preg_match;
use function str_replace;
use function implode;
use function is_numeric;
use function array_keys;
use function array_map;

trait DbDumpTrait
{
    /**
     * The dump options
     *
     * @var array
     */
    private $options;

    /**
     * The queries generated by the dump
     *
     * @var array
     */
    private $queries = [];

    // Temp vars for data dumps
    private $insert = '';
    private $buffer = '';
    private $suffix = '';
    private $views = [];
    private $fkeys = [];

    /**
     * Print CSV row
     *
     * @param array  $row
     *
     * @return void
     */
    private function dumpCsv(array $row)
    {
        // From functions.inc.php
        foreach ($row as $key => $val) {
            if (preg_match('~["\n,;\t]|^0|\.\d*0$~', $val) || $val === '') {
                $row[$key] = '"' . str_replace('"', '""', $val) . '"';
            }
        }
        $separator = $this->options['format'] == 'csv' ? ',' :
            ($this->options['format'] == 'tsv' ? "\t" : ';');
        $this->queries[] = implode($separator, $row);
    }

    /**
     * Convert a value to string
     *
     * @param mixed  $val
     * @param object $field
     *
     * @return string
     */
    private function convertToString($val, $field): string
    {
        // From functions.inc.php
        if ($val === null) {
            return 'NULL';
        }
        return $this->driver->unconvertField($field, preg_match($this->driver->numberRegex(), $field->type) &&
        !preg_match('~\[~', $field->fullType) && is_numeric($val) ?
            $val : $this->driver->quote(($val === false ? 0 : $val)));
    }

    /**
     * Export table structure
     *
     * @param string $table
     * @param string $style
     * @param int    $tableType       0 table, 1 view, 2 temporary view table
     *
     * @return null prints data
     */
    private function dumpTableOrView(string $table, string $style, int $tableType = 0)
    {
        // From adminer.inc.php
        if ($this->options['format'] != 'sql') {
            $this->queries[] = "\xef\xbb\xbf"; // UTF-8 byte order mark
            if ($style) {
                $this->dumpCsv(array_keys($this->driver->fields($table)));
            }
            return;
        }

        if ($tableType == 2) {
            $fields = [];
            foreach ($this->driver->fields($table) as $name => $field) {
                $fields[] = $this->driver->escapeId($name) . ' ' . $field->fullType;
            }
            $create = 'CREATE TABLE ' . $this->driver->table($table) . ' (' . implode(', ', $fields) . ')';
        } else {
            $create = $this->driver->sqlForCreateTable($table, $this->options['autoIncrement'], $style);
        }
        $this->driver->setUtf8mb4($create);
        if ($style && $create) {
            if ($style == 'DROP+CREATE' || $tableType == 1) {
                $this->queries[] = 'DROP ' . ($tableType == 2 ? 'VIEW' : 'TABLE') .
                    ' IF EXISTS ' . $this->driver->table($table) . ';';
            }
            if ($tableType == 1) {
                $create = $this->admin->removeDefiner($create);
            }
            $this->queries[] = $create . ';';
        }
    }

    /**
     * @param array $row
     * @param StatementInterface $statement
     *
     * @return array
     */
    private function getDataRowKeys(array $row, StatementInterface $statement): array
    {
        $values = [];
        $keys = [];
        foreach ($row as $val) {
            $field = $statement->fetchField();
            $keys[] = $field->name();
            $key = $this->driver->escapeId($field->name());
            $values[] = "$key = VALUES($key)";
        }
        $this->suffix = ";\n";
        if ($this->options['data_style'] == 'INSERT+UPDATE') {
            $this->suffix = "\nON DUPLICATE KEY UPDATE " . implode(', ', $values) . ";\n";
        }
        return $keys;
    }

    /**
     * @param string $table
     * @param array $fields
     * @param array $row
     * @param array $keys
     *
     * @return void
     */
    private function dumpDataRow(string $table, array $fields, array $row, array $keys)
    {
        if ($this->options['format'] != 'sql') {
            if ($this->options['data_style'] == 'table') {
                $this->dumpCsv($keys);
                $this->options['data_style'] = 'INSERT';
            }
            $this->dumpCsv($row);
        } else {
            if (!$this->insert) {
                $this->insert = 'INSERT INTO ' . $this->driver->table($table) . ' (' .
                    implode(', ', array_map(function ($key) {
                        return $this->driver->escapeId($key);
                    }, $keys)) . ') VALUES';
            }
            foreach ($row as $key => $val) {
                $field = $fields[$key];
                $row[$key] = $this->convertToString($val, $field);
            }
            $max_packet = ($this->driver->jush() == 'sqlite' ? 0 : 1048576); // default, minimum is 1024
            $s = ($max_packet ? "\n" : ' ') . '(' . implode(",\t", $row) . ')';
            if (!$this->buffer) {
                $this->buffer = $this->insert . $s;
            } elseif (strlen($this->buffer) + 4 + strlen($s) + strlen($this->suffix) < $max_packet) { // 4 - length specification
                $this->buffer .= ",$s";
            } else {
                $this->queries[] = $this->buffer . $this->suffix;
                $this->buffer = $this->insert . $s;
            }
        }
    }

    /** Export table data
     *
     * @param string $table
     * @param string $query
     *
     * @return null prints data
     */
    private function dumpData(string $table, string $query)
    {
        $fields = [];
        if ($this->options['data_style']) {
            if ($this->options['format'] == 'sql') {
                if ($this->options['data_style'] == 'TRUNCATE+INSERT') {
                    $this->queries[] = $this->driver->sqlForTruncateTable($table) . ";\n";
                }
                $fields = $this->driver->fields($table);
            }
            $statement = $this->driver->query($query); // 1 - MYSQLI_USE_RESULT //! enum and set as numbers
            if ($statement) {
                $this->insert = '';
                $this->buffer = '';
                $this->suffix = '';
                $keys = [];
                $fetch_function = ($table != '' ? 'fetchAssoc' : 'fetchRow');
                while ($row = $statement->$fetch_function()) {
                    if (empty($keys)) {
                        $keys = $this->getDataRowKeys($row, $statement);
                    }
                    $this->dumpDataRow($table, $fields, $row, $keys);
                }
                if ($this->buffer) {
                    $this->queries[] = $this->buffer . $this->suffix;
                }
            } elseif ($this->options['format'] == 'sql') {
                $this->queries[] = '-- ' . str_replace("\n", ' ', $this->driver->error()) . "\n";
            }
        }
    }

    /**
     * @param string $table
     * @param TableEntity $tableStatus
     * @param bool $dumpTable
     * @param bool $dumpData
     *
     * @return void
     */
    private function dumpTable(string $table, TableEntity $tableStatus, bool $dumpTable, bool $dumpData)
    {
        if ($dumpTable || $dumpData) {
            $this->dumpTableOrView($table, ($dumpTable ? $this->options['table_style'] : ''));
            if ($dumpData) {
                $fields = $this->driver->fields($table);
                $query = 'SELECT *' . $this->driver->convertFields($fields, $fields) .
                    ' FROM ' . $this->driver->table($table);
                $this->dumpData($table, $query);
            }
            if ($this->options['is_sql'] && $this->options['triggers'] && $dumpTable &&
                ($triggers = $this->driver->sqlForCreateTrigger($table))) {
                $this->queries[] = 'DELIMITER ;';
                $this->queries[] = $triggers;
                $this->queries[] = 'DELIMITER ;';
            }
            if ($this->options['is_sql']) {
                $this->queries[] = '';
            }
        }
    }

    /**
     * Dump tables
     *
     * @param string $database      The database name
     *
     * @return void
     */
    private function dumpTables(string $database)
    {
        $dbDumpTable = $this->tables['list'] === '*' && in_array($database, $this->databases['list']);
        $dbDumpData = in_array($database, $this->databases['data']);
        $this->views = []; // View names
        $this->fkeys = []; // Table names for foreign keys
        $dbTables = $this->driver->tableStatuses(true);
        foreach ($dbTables as $table => $tableStatus) {
            $isView = $this->driver->isView($tableStatus);
            if ($isView) {
                // The views will be dumped after the tables
                $this->views[] = $table;
                continue;
            }
            $this->fkeys[] = $table;
            $dumpTable = $dbDumpTable || in_array($table, $this->tables['list']);
            $dumpData = $dbDumpData || in_array($table, $this->tables['data']);
            $this->dumpTable($table, $tableStatus, $dumpTable, $dumpData);
        }
    }

    /**
     * @return void
     */
    private function dumpViewsAndFKeys()
    {
        // Add FKs after creating tables (except in MySQL which uses SET FOREIGN_KEY_CHECKS=0)
        if ($this->driver->support('fkeys_sql')) {
            foreach ($this->fkeys as $table) {
                $this->queries[] = $this->driver->sqlForForeignKeys($table);
            }
        }
        // Dump the views after all the tables
        foreach ($this->views as $view) {
            $this->dumpTableOrView($view, $this->options['table_style'], 1);
        }
    }
}
